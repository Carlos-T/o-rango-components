webpackJsonp([44],{1044:function(n,e){n.exports="# readJson(file, [options, callback])\n\nReads a JSON file and then parses it into an object. `options` are the same\nthat you'd pass to [`jsonFile.readFile`](https://github.com/jprichardson/node-jsonfile#readfilefilename-options-callback).\n\n**Alias:** `readJSON()`\n\n- `file` `<String>`\n- `options` `<Object>`\n- `callback` `<Function>`\n\n## Example:\n\n```js\nconst fs = require('fs-extra')\n\nfs.readJson('./package.json', (err, packageObj) => {\n  if (err) console.error(err)\n\n  console.log(packageObj.version) // => 0.1.3\n})\n\n// Promise Usage\nfs.readJson('./package.json')\n.then(packageObj => {\n  console.log(packageObj.version) // => 0.1.3\n})\n.catch(err => {\n  console.error(err)\n})\n```\n\n---\n\n`readJson()` can take a `throws` option set to `false` and it won't throw if the JSON is invalid. Example:\n\n```js\nconst fs = require('fs-extra')\n\nconst file = '/tmp/some-invalid.json'\nconst data = '{not valid JSON'\nfs.writeFileSync(file, data)\n\nfs.readJson(file, { throws: false }, (err, obj) => {\n  if (err) console.error(err)\n\n  console.log(obj) // => null\n})\n\n// Promise Usage\nfs.readJson(file, { throws: false })\n.then(obj => {\n  console.log(obj) // => null\n})\n.catch(err => {\n  console.error(err) // Not called\n})\n```\n"},887:function(n,e,o){var a=o(15),r=o(45),t=o(286).PageRenderer;t.__esModule&&(t=t.default);var s=r({displayName:"WrappedPageRenderer",getInitialState:function(){return{content:o(1044)}},componentWillMount:function(){},render:function(){return a.createElement(t,Object.assign({},this.props,{content:this.state.content}))}});s.__catalog_loader__=!0,n.exports=s}});
//# sourceMappingURL=44.88ca7118.chunk.js.map