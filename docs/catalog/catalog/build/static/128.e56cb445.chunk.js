webpackJsonp([128],{803:function(e,t,n){var o=n(15),r=n(45),i=n(286).PageRenderer;i.__esModule&&(i=i.default);var a=r({displayName:"WrappedPageRenderer",getInitialState:function(){return{content:n(960)}},componentWillMount:function(){},render:function(){return o.createElement(i,Object.assign({},this.props,{content:this.state.content}))}});a.__catalog_loader__=!0,e.exports=a},960:function(e,t){e.exports="# outputFile(file, data, [options, callback])\n\nAlmost the same as `writeFile` (i.e. it [overwrites](http://pages.citebite.com/v2o5n8l2f5reb)), except that if the parent directory does not exist, it's created. `file` must be a file path (a buffer or a file descriptor is not allowed). `options` are what you'd pass to [`fs.writeFile()`](https://nodejs.org/api/fs.html#fs_fs_writefile_file_data_options_callback).\n\n- `file` `<String>`\n- `data` `<String> | <Buffer> | <Uint8Array>`\n- `options` `<Object> | <String>`\n- `callback` `<Function>`\n\n## Example:\n\n```js\nconst fs = require('fs-extra')\n\nconst file = '/tmp/this/path/does/not/exist/file.txt'\nfs.outputFile(file, 'hello!', err => {\n  console.log(err) // => null\n\n  fs.readFile(file, 'utf8', (err, data) => {\n    if (err) return console.error(err)\n    console.log(data) // => hello!\n  })\n})\n\n// With Promises:\nfs.outputFile(file, 'hello!')\n.then(() => fs.readFile(file, 'utf8'))\n.then(data => {\n  console.log(data) // => hello!\n})\n.catch(err => {\n  console.error(err)\n})\n```\n"}});
//# sourceMappingURL=128.e56cb445.chunk.js.map