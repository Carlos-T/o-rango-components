webpackJsonp([129],{802:function(t,e,n){var i=n(15),o=n(45),a=n(286).PageRenderer;a.__esModule&&(a=a.default);var s=o({displayName:"WrappedPageRenderer",getInitialState:function(){return{content:n(959)}},componentWillMount:function(){},render:function(){return i.createElement(a,Object.assign({},this.props,{content:this.state.content}))}});s.__catalog_loader__=!0,t.exports=s},959:function(t,e){t.exports="# outputFileSync(file, data, [options])\n\nAlmost the same as `writeFileSync` (i.e. it [overwrites](http://pages.citebite.com/v2o5n8l2f5reb)), except that if the parent directory does not exist, it's created. `file` must be a file path (a buffer or a file descriptor is not allowed). `options` are what you'd pass to [`fs.writeFileSync()`](https://nodejs.org/api/fs.html#fs_fs_writefilesync_file_data_options).\n\n- `file` `<String>`\n- `data` `<String> | <Buffer> | <Uint8Array>`\n- `options` `<Object> | <String>`\n\n## Example:\n\n```js\nconst fs = require('fs-extra')\n\nconst file = '/tmp/this/path/does/not/exist/file.txt'\nfs.outputFileSync(file, 'hello!')\n\nconst data = fs.readFileSync(file, 'utf8')\nconsole.log(data) // => hello!\n```\n"}});
//# sourceMappingURL=129.83a2f7c2.chunk.js.map