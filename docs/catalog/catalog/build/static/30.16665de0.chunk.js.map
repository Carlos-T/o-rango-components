{"version":3,"sources":["webpack:///static/30.16665de0.chunk.js","webpack:////Users/roca/o-rango/o-rango-components/components/o-button/node_modules/joi/README.md","webpack:////Users/roca/o-rango/o-rango-components/components/o-button/node_modules/joi/README.md?b7ab"],"names":["webpackJsonp","1058","module","exports","901","__webpack_require__","React","createReactClass","PageRenderer","__esModule","default","WrappedPageRenderer","displayName","getInitialState","content","componentWillMount","render","createElement","Object","assign","this","props","state","__catalog_loader__"],"mappings":"AAAAA,cAAc,KAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,QAAA,q+JDSMC,IACA,SAAUF,EAAQC,EAASE,GETjC,GAAAC,GAAgBD,EAAQ,IACxBE,EAA2BF,EAAQ,IACnCG,EAAuBH,EAAQ,KAASG,YACxCA,GAAAC,aACAD,IAAAE,QAEA,IAAAC,GAAAJ,GACAK,YAAA,sBACAC,gBAAA,WACA,OAAgBC,QAAST,EAAQ,QAEjCU,mBAAA,aAUAC,OAAA,WACA,MAAAV,GAAAW,cAAAT,EAAAU,OAAAC,UAAiEC,KAAAC,OAAeP,QAAAM,KAAAE,MAAAR,aAGhFH,GAAAY,oBAAA,EACArB,EAAAC,QAAAQ","file":"static/30.16665de0.chunk.js","sourcesContent":["webpackJsonp([30],{\n\n/***/ 1058:\n/***/ (function(module, exports) {\n\nmodule.exports = \"![joi Logo](https://raw.github.com/hapijs/joi/master/images/joi.png)\\n\\nObject schema description language and validator for JavaScript objects.\\n\\n[![npm version](https://badge.fury.io/js/joi.svg)](http://badge.fury.io/js/joi)\\n[![Build Status](https://secure.travis-ci.org/hapijs/joi.svg?branch=master)](http://travis-ci.org/hapijs/joi)\\n<!--\\n\\nRemove those badges until they work properly on semver.\\n\\n[![Dependencies Status](https://david-dm.org/hapijs/joi.svg)](https://david-dm.org/hapijs/joi)\\n[![DevDependencies Status](https://david-dm.org/hapijs/joi/dev-status.svg)](https://david-dm.org/hapijs/joi#info=devDependencies)\\n\\n-->\\n[![NSP Status](https://nodesecurity.io/orgs/hapijs/projects/0394bf83-b5bc-410b-878c-e8cf1b92033e/badge)](https://nodesecurity.io/orgs/hapijs/projects/0394bf83-b5bc-410b-878c-e8cf1b92033e)\\n[![Known Vulnerabilities](https://snyk.io/test/github/hapijs/joi/badge.svg)](https://snyk.io/test/github/hapijs/joi)\\n\\n[![Join the chat at https://gitter.im/hapijs/joi](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/hapijs/joi?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\\n\\nLead Maintainer: [Nicolas Morel](https://github.com/marsup)\\n\\n# Introduction\\n\\nImagine you run facebook and you want visitors to sign up on the website with real names and not something like `l337_p@nda` in the first name field. How would you define the limitations of what can be inputted and validate it against the set rules?\\n\\nThis is joi, joi allows you to create *blueprints* or *schemas* for JavaScript objects (an object that stores information) to ensure *validation* of key information.\\n\\n# API\\nSee the detailed [API Reference](https://github.com/hapijs/joi/blob/v11.4.0/API.md).\\n\\n# Example\\n\\n```javascript\\nconst Joi = require('joi');\\n\\nconst schema = Joi.object().keys({\\n    username: Joi.string().alphanum().min(3).max(30).required(),\\n    password: Joi.string().regex(/^[a-zA-Z0-9]{3,30}$/),\\n    access_token: [Joi.string(), Joi.number()],\\n    birthyear: Joi.number().integer().min(1900).max(2013),\\n    email: Joi.string().email()\\n}).with('username', 'birthyear').without('password', 'access_token');\\n\\n// Return result.\\nconst result = Joi.validate({ username: 'abc', birthyear: 1994 }, schema);\\n// result.error === null -> valid\\n\\n// You can also pass a callback which will be called synchronously with the validation result.\\nJoi.validate({ username: 'abc', birthyear: 1994 }, schema, function (err, value) { });  // err === null -> valid\\n\\n```\\n\\nThe above schema defines the following constraints:\\n* `username`\\n    * a required string\\n    * must contain only alphanumeric characters\\n    * at least 3 characters long but no more than 30\\n    * must be accompanied by `birthyear`\\n* `password`\\n    * an optional string\\n    * must satisfy the custom regex\\n    * cannot appear together with `access_token`\\n* `access_token`\\n    * an optional, unconstrained string or number\\n* `birthyear`\\n    * an integer between 1900 and 2013\\n* `email`\\n    * a valid email address string\\n\\n# Usage\\n\\nUsage is a two steps process. First, a schema is constructed using the provided types and constraints:\\n\\n```javascript\\nconst schema = {\\n    a: Joi.string()\\n};\\n```\\n\\nNote that **joi** schema objects are immutable which means every additional rule added (e.g. `.min(5)`) will return a\\nnew schema object.\\n\\nThen the value is validated against the schema:\\n\\n```javascript\\nconst {error, value} = Joi.validate({ a: 'a string' }, schema);\\n\\n// or\\n\\nJoi.validate({ a: 'a string' }, schema, function (err, value) { });\\n```\\n\\nIf the input is valid, then the error will be `null`, otherwise it will be an Error object.\\n\\nThe schema can be a plain JavaScript object where every key is assigned a **joi** type, or it can be a **joi** type directly:\\n\\n```javascript\\nconst schema = Joi.string().min(10);\\n```\\n\\nIf the schema is a **joi** type, the `schema.validate(value, callback)` can be called directly on the type. When passing a non-type schema object,\\nthe module converts it internally to an object() type equivalent to:\\n\\n```javascript\\nconst schema = Joi.object().keys({\\n    a: Joi.string()\\n});\\n```\\n\\nWhen validating a schema:\\n\\n* Values (or keys in case of objects) are optional by default.\\n\\n    ```javascript\\n    Joi.validate(undefined, Joi.string()); // validates fine\\n    ```\\n\\n    To disallow this behavior, you can either set the schema as `required()`, or set `presence` to `\\\"required\\\"` when passing `options`:\\n\\n    ```javascript\\n    Joi.validate(undefined, Joi.string().required());\\n    // or\\n    Joi.validate(undefined, Joi.string(), /* options */ { presence: \\\"required\\\" });\\n    ```\\n\\n* Strings are utf-8 encoded by default.\\n* Rules are defined in an additive fashion and evaluated in order after whitelist and blacklist checks.\\n\\n# Browsers\\n\\nJoi doesn't directly support browsers, but you could use [joi-browser](https://github.com/jeffbski/joi-browser) for an ES5 build of Joi that works in browsers, or as a source of inspiration for your own builds.\\n\"\n\n/***/ }),\n\n/***/ 901:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n    var React = __webpack_require__(15);\n    var createReactClass = __webpack_require__(45);\n    var PageRenderer = __webpack_require__(286).PageRenderer;\n    if (PageRenderer.__esModule) {\n      PageRenderer = PageRenderer.default;\n    }\n    var WrappedPageRenderer = createReactClass({\n      displayName: 'WrappedPageRenderer',\n      getInitialState: function() {\n        return {content: __webpack_require__(1058)};\n      },\n      componentWillMount: function() {\n        var component = this;\n        if (false) {\n          module.hot.accept(\"!!../../../../docs/catalog/node_modules/raw-loader/index.js!./README.md\", function() {\n            component.setState({\n              content: require(\"!!../../../../docs/catalog/node_modules/raw-loader/index.js!./README.md\")\n            })\n          })\n        }\n      },\n      render: function() {\n        return React.createElement(PageRenderer, Object.assign({}, this.props, {content: this.state.content}));\n      }\n    });\n    WrappedPageRenderer.__catalog_loader__ = true;\n    module.exports = WrappedPageRenderer;\n  \n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/30.16665de0.chunk.js","module.exports = \"![joi Logo](https://raw.github.com/hapijs/joi/master/images/joi.png)\\n\\nObject schema description language and validator for JavaScript objects.\\n\\n[![npm version](https://badge.fury.io/js/joi.svg)](http://badge.fury.io/js/joi)\\n[![Build Status](https://secure.travis-ci.org/hapijs/joi.svg?branch=master)](http://travis-ci.org/hapijs/joi)\\n<!--\\n\\nRemove those badges until they work properly on semver.\\n\\n[![Dependencies Status](https://david-dm.org/hapijs/joi.svg)](https://david-dm.org/hapijs/joi)\\n[![DevDependencies Status](https://david-dm.org/hapijs/joi/dev-status.svg)](https://david-dm.org/hapijs/joi#info=devDependencies)\\n\\n-->\\n[![NSP Status](https://nodesecurity.io/orgs/hapijs/projects/0394bf83-b5bc-410b-878c-e8cf1b92033e/badge)](https://nodesecurity.io/orgs/hapijs/projects/0394bf83-b5bc-410b-878c-e8cf1b92033e)\\n[![Known Vulnerabilities](https://snyk.io/test/github/hapijs/joi/badge.svg)](https://snyk.io/test/github/hapijs/joi)\\n\\n[![Join the chat at https://gitter.im/hapijs/joi](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/hapijs/joi?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\\n\\nLead Maintainer: [Nicolas Morel](https://github.com/marsup)\\n\\n# Introduction\\n\\nImagine you run facebook and you want visitors to sign up on the website with real names and not something like `l337_p@nda` in the first name field. How would you define the limitations of what can be inputted and validate it against the set rules?\\n\\nThis is joi, joi allows you to create *blueprints* or *schemas* for JavaScript objects (an object that stores information) to ensure *validation* of key information.\\n\\n# API\\nSee the detailed [API Reference](https://github.com/hapijs/joi/blob/v11.4.0/API.md).\\n\\n# Example\\n\\n```javascript\\nconst Joi = require('joi');\\n\\nconst schema = Joi.object().keys({\\n    username: Joi.string().alphanum().min(3).max(30).required(),\\n    password: Joi.string().regex(/^[a-zA-Z0-9]{3,30}$/),\\n    access_token: [Joi.string(), Joi.number()],\\n    birthyear: Joi.number().integer().min(1900).max(2013),\\n    email: Joi.string().email()\\n}).with('username', 'birthyear').without('password', 'access_token');\\n\\n// Return result.\\nconst result = Joi.validate({ username: 'abc', birthyear: 1994 }, schema);\\n// result.error === null -> valid\\n\\n// You can also pass a callback which will be called synchronously with the validation result.\\nJoi.validate({ username: 'abc', birthyear: 1994 }, schema, function (err, value) { });  // err === null -> valid\\n\\n```\\n\\nThe above schema defines the following constraints:\\n* `username`\\n    * a required string\\n    * must contain only alphanumeric characters\\n    * at least 3 characters long but no more than 30\\n    * must be accompanied by `birthyear`\\n* `password`\\n    * an optional string\\n    * must satisfy the custom regex\\n    * cannot appear together with `access_token`\\n* `access_token`\\n    * an optional, unconstrained string or number\\n* `birthyear`\\n    * an integer between 1900 and 2013\\n* `email`\\n    * a valid email address string\\n\\n# Usage\\n\\nUsage is a two steps process. First, a schema is constructed using the provided types and constraints:\\n\\n```javascript\\nconst schema = {\\n    a: Joi.string()\\n};\\n```\\n\\nNote that **joi** schema objects are immutable which means every additional rule added (e.g. `.min(5)`) will return a\\nnew schema object.\\n\\nThen the value is validated against the schema:\\n\\n```javascript\\nconst {error, value} = Joi.validate({ a: 'a string' }, schema);\\n\\n// or\\n\\nJoi.validate({ a: 'a string' }, schema, function (err, value) { });\\n```\\n\\nIf the input is valid, then the error will be `null`, otherwise it will be an Error object.\\n\\nThe schema can be a plain JavaScript object where every key is assigned a **joi** type, or it can be a **joi** type directly:\\n\\n```javascript\\nconst schema = Joi.string().min(10);\\n```\\n\\nIf the schema is a **joi** type, the `schema.validate(value, callback)` can be called directly on the type. When passing a non-type schema object,\\nthe module converts it internally to an object() type equivalent to:\\n\\n```javascript\\nconst schema = Joi.object().keys({\\n    a: Joi.string()\\n});\\n```\\n\\nWhen validating a schema:\\n\\n* Values (or keys in case of objects) are optional by default.\\n\\n    ```javascript\\n    Joi.validate(undefined, Joi.string()); // validates fine\\n    ```\\n\\n    To disallow this behavior, you can either set the schema as `required()`, or set `presence` to `\\\"required\\\"` when passing `options`:\\n\\n    ```javascript\\n    Joi.validate(undefined, Joi.string().required());\\n    // or\\n    Joi.validate(undefined, Joi.string(), /* options */ { presence: \\\"required\\\" });\\n    ```\\n\\n* Strings are utf-8 encoded by default.\\n* Rules are defined in an additive fashion and evaluated in order after whitelist and blacklist checks.\\n\\n# Browsers\\n\\nJoi doesn't directly support browsers, but you could use [joi-browser](https://github.com/jeffbski/joi-browser) for an ES5 build of Joi that works in browsers, or as a source of inspiration for your own builds.\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/raw-loader!/Users/roca/o-rango/o-rango-components/components/o-button/node_modules/joi/README.md\n// module id = 1058\n// module chunks = 30","\n    var React = require('react');\n    var createReactClass = require('create-react-class');\n    var PageRenderer = require('catalog').PageRenderer;\n    if (PageRenderer.__esModule) {\n      PageRenderer = PageRenderer.default;\n    }\n    var WrappedPageRenderer = createReactClass({\n      displayName: 'WrappedPageRenderer',\n      getInitialState: function() {\n        return {content: require(\"!!../../../../docs/catalog/node_modules/raw-loader/index.js!./README.md\")};\n      },\n      componentWillMount: function() {\n        var component = this;\n        if (module.hot) {\n          module.hot.accept(\"!!../../../../docs/catalog/node_modules/raw-loader/index.js!./README.md\", function() {\n            component.setState({\n              content: require(\"!!../../../../docs/catalog/node_modules/raw-loader/index.js!./README.md\")\n            })\n          })\n        }\n      },\n      render: function() {\n        return React.createElement(PageRenderer, Object.assign({}, this.props, {content: this.state.content}));\n      }\n    });\n    WrappedPageRenderer.__catalog_loader__ = true;\n    module.exports = WrappedPageRenderer;\n  \n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/roca/o-rango/o-rango-components/components/o-button/node_modules/joi/README.md\n// module id = 901\n// module chunks = 30"],"sourceRoot":""}