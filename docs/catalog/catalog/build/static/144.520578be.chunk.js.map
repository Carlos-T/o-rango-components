{"version":3,"sources":["webpack:///static/144.520578be.chunk.js","webpack:////Users/roca/o-rango/o-rango-components/components/o-alert/node_modules/fs-extra/docs/copy-sync.md?c22e","webpack:////Users/roca/o-rango/o-rango-components/components/o-alert/node_modules/fs-extra/docs/copy-sync.md"],"names":["webpackJsonp","787","module","exports","__webpack_require__","React","createReactClass","PageRenderer","__esModule","default","WrappedPageRenderer","displayName","getInitialState","content","componentWillMount","render","createElement","Object","assign","this","props","state","__catalog_loader__","944"],"mappings":"AAAAA,cAAc,MAERC,IACA,SAAUC,EAAQC,EAASC,GCFjC,GAAAC,GAAgBD,EAAQ,IACxBE,EAA2BF,EAAQ,IACnCG,EAAuBH,EAAQ,KAASG,YACxCA,GAAAC,aACAD,IAAAE,QAEA,IAAAC,GAAAJ,GACAK,YAAA,sBACAC,gBAAA,WACA,OAAgBC,QAAST,EAAQ,OAEjCU,mBAAA,aAUAC,OAAA,WACA,MAAAV,GAAAW,cAAAT,EAAAU,OAAAC,UAAiEC,KAAAC,OAAeP,QAAAM,KAAAE,MAAAR,aAGhFH,GAAAY,oBAAA,EACApB,EAAAC,QAAAO,GDUMa,IACA,SAAUrB,EAAQC,GEtCxBD,EAAAC,QAAA","file":"static/144.520578be.chunk.js","sourcesContent":["webpackJsonp([144],{\n\n/***/ 787:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n    var React = __webpack_require__(15);\n    var createReactClass = __webpack_require__(45);\n    var PageRenderer = __webpack_require__(286).PageRenderer;\n    if (PageRenderer.__esModule) {\n      PageRenderer = PageRenderer.default;\n    }\n    var WrappedPageRenderer = createReactClass({\n      displayName: 'WrappedPageRenderer',\n      getInitialState: function() {\n        return {content: __webpack_require__(944)};\n      },\n      componentWillMount: function() {\n        var component = this;\n        if (false) {\n          module.hot.accept(\"!!../../../../../docs/catalog/node_modules/raw-loader/index.js!./copy-sync.md\", function() {\n            component.setState({\n              content: require(\"!!../../../../../docs/catalog/node_modules/raw-loader/index.js!./copy-sync.md\")\n            })\n          })\n        }\n      },\n      render: function() {\n        return React.createElement(PageRenderer, Object.assign({}, this.props, {content: this.state.content}));\n      }\n    });\n    WrappedPageRenderer.__catalog_loader__ = true;\n    module.exports = WrappedPageRenderer;\n  \n\n/***/ }),\n\n/***/ 944:\n/***/ (function(module, exports) {\n\nmodule.exports = \"# copySync(src, dest, [options])\\n\\nCopy a file or directory. The directory can have contents. Like `cp -r`.\\n\\n- `src` `<String>`\\n- `dest` `<String>`\\n- `options` `<Object>`\\n  - `overwrite` `<boolean>`: overwrite existing file or directory, default is `true`. _Note that the copy operation will silently fail if you set this to `false` and the destination exists._ Use the `errorOnExist` option to change this behavior.\\n  - `errorOnExist` `<boolean>`: when `overwrite` is `false` and the destination exists, throw an error. Default is `false`.\\n  - `dereference` `<boolean>`: dereference symlinks, default is `false`.\\n  - `preserveTimestamps` `<boolean>`: will set last modification and access times to the ones of the original source files, default is `false`.\\n  - `filter` `<Function>`: Function to filter copied files. Return `true` to include, `false` to exclude. This can also be a RegExp, however this is deprecated (See [issue #239](https://github.com/jprichardson/node-fs-extra/issues/239) for background).\\n\\n## Example:\\n\\n```js\\nconst fs = require('fs-extra')\\n\\n// copy file\\nfs.copySync('/tmp/myfile', '/tmp/mynewfile')\\n\\n// copy directory, even if it has subdirectories or files\\nfs.copySync('/tmp/mydir', '/tmp/mynewdir')\\n```\\n\\n**Using filter function**\\n\\n```js\\nconst fs = require('fs-extra')\\n\\nconst filterFunc = (src, dest) => {\\n  // your logic here\\n  // it will be copied if return true\\n}\\n\\nfs.copySync('/tmp/mydir', '/tmp/mynewdir', { filter: filterFunc })\\n```\\n\"\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/144.520578be.chunk.js","\n    var React = require('react');\n    var createReactClass = require('create-react-class');\n    var PageRenderer = require('catalog').PageRenderer;\n    if (PageRenderer.__esModule) {\n      PageRenderer = PageRenderer.default;\n    }\n    var WrappedPageRenderer = createReactClass({\n      displayName: 'WrappedPageRenderer',\n      getInitialState: function() {\n        return {content: require(\"!!../../../../../docs/catalog/node_modules/raw-loader/index.js!./copy-sync.md\")};\n      },\n      componentWillMount: function() {\n        var component = this;\n        if (module.hot) {\n          module.hot.accept(\"!!../../../../../docs/catalog/node_modules/raw-loader/index.js!./copy-sync.md\", function() {\n            component.setState({\n              content: require(\"!!../../../../../docs/catalog/node_modules/raw-loader/index.js!./copy-sync.md\")\n            })\n          })\n        }\n      },\n      render: function() {\n        return React.createElement(PageRenderer, Object.assign({}, this.props, {content: this.state.content}));\n      }\n    });\n    WrappedPageRenderer.__catalog_loader__ = true;\n    module.exports = WrappedPageRenderer;\n  \n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/roca/o-rango/o-rango-components/components/o-alert/node_modules/fs-extra/docs/copy-sync.md\n// module id = 787\n// module chunks = 144","module.exports = \"# copySync(src, dest, [options])\\n\\nCopy a file or directory. The directory can have contents. Like `cp -r`.\\n\\n- `src` `<String>`\\n- `dest` `<String>`\\n- `options` `<Object>`\\n  - `overwrite` `<boolean>`: overwrite existing file or directory, default is `true`. _Note that the copy operation will silently fail if you set this to `false` and the destination exists._ Use the `errorOnExist` option to change this behavior.\\n  - `errorOnExist` `<boolean>`: when `overwrite` is `false` and the destination exists, throw an error. Default is `false`.\\n  - `dereference` `<boolean>`: dereference symlinks, default is `false`.\\n  - `preserveTimestamps` `<boolean>`: will set last modification and access times to the ones of the original source files, default is `false`.\\n  - `filter` `<Function>`: Function to filter copied files. Return `true` to include, `false` to exclude. This can also be a RegExp, however this is deprecated (See [issue #239](https://github.com/jprichardson/node-fs-extra/issues/239) for background).\\n\\n## Example:\\n\\n```js\\nconst fs = require('fs-extra')\\n\\n// copy file\\nfs.copySync('/tmp/myfile', '/tmp/mynewfile')\\n\\n// copy directory, even if it has subdirectories or files\\nfs.copySync('/tmp/mydir', '/tmp/mynewdir')\\n```\\n\\n**Using filter function**\\n\\n```js\\nconst fs = require('fs-extra')\\n\\nconst filterFunc = (src, dest) => {\\n  // your logic here\\n  // it will be copied if return true\\n}\\n\\nfs.copySync('/tmp/mydir', '/tmp/mynewdir', { filter: filterFunc })\\n```\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/raw-loader!/Users/roca/o-rango/o-rango-components/components/o-alert/node_modules/fs-extra/docs/copy-sync.md\n// module id = 944\n// module chunks = 144"],"sourceRoot":""}